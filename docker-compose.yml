version: '3.8'

services:
  # =================================
  # Service Discovery & Configuration
  # =================================
  
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: arka-eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8761
    networks:
      - arka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: arka-config-server
    ports:
      - "9090:9090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=9090
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - arka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =================================
  # Message Broker
  # =================================
  
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: arka-rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: arka
      RABBITMQ_DEFAULT_PASS: arka123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - arka-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================
  # API Gateway
  # =================================
  
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: arka-api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_CLOUD_CONFIG_URI=http://config-server:9090
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - arka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =================================
  # Business Microservices
  # =================================
  
  gestor-solicitudes:
    build:
      context: ./arca-gestor-solicitudes
      dockerfile: Dockerfile
    container_name: arka-gestor-solicitudes
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8082
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_CLOUD_CONFIG_URI=http://config-server:9090
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=arka
      - SPRING_RABBITMQ_PASSWORD=arka123
      - SPRING_R2DBC_URL=r2dbc:h2:mem:///gestor_db?options=DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      - ARKA_SECURITY_JWT_SECRET=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
      - ARKA_SECURITY_JWT_EXPIRATION=86400
      - ARKA_SECURITY_JWT_REFRESH_EXPIRATION=604800
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - arka-network
    volumes:
      - gestor-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  cotizador:
    build:
      context: ./arca-cotizador
      dockerfile: Dockerfile
    container_name: arka-cotizador
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8083
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_CLOUD_CONFIG_URI=http://config-server:9090
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=arka
      - SPRING_RABBITMQ_PASSWORD=arka123
      - SPRING_R2DBC_URL=r2dbc:h2:mem:///cotizador_db?options=DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - arka-network
    volumes:
      - cotizador-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  hello-world-service:
    build:
      context: ./hello-world-service
      dockerfile: Dockerfile
    container_name: arka-hello-world
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8084
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_CLOUD_CONFIG_URI=http://config-server:9090
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - arka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =================================
  # Monitoring & Observability
  # =================================
  
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: arka-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - arka-network

  grafana:
    image: grafana/grafana:9.2.0
    container_name: arka-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - arka-network

  # =================================
  # Database (Alternative to H2)
  # =================================
  
  postgres:
    image: postgres:15-alpine
    container_name: arka-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: arka_db
      POSTGRES_USER: arka
      POSTGRES_PASSWORD: arka123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - arka-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arka -d arka_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: arka-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass arka123
    volumes:
      - redis-data:/data
    networks:
      - arka-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# =================================
# Networks
# =================================

  # =================================
  # MongoDB & Email Services
  # =================================
  
  # üçÉ MongoDB for Notifications
  mongodb:
    image: mongo:7.0
    container_name: arka-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: arka_admin
      MONGO_INITDB_ROOT_PASSWORD: Arca2025*
      MONGO_INITDB_DATABASE: arka_notifications
    volumes:
      - mongodb_data:/data/db
    networks:
      - arka-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üóÉÔ∏è MongoDB Express (Web UI)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: arka-mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: arka_admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: Arca2025*
      ME_CONFIG_MONGODB_URL: mongodb://arka_admin:Arca2025*@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongodb
    networks:
      - arka-network

  # üìß MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: arka-mailhog
    restart: always
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - arka-network

networks:
  arka-network:
    driver: bridge
    name: arka-microservices-network

# =================================
# Volumes
# =================================

volumes:
  rabbitmq-data:
    driver: local
  gestor-data:
    driver: local
  cotizador-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  mongodb_data:
    driver: local
