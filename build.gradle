plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '6.0.0.5145'
}

// Configuraci√≥n com√∫n para todos los m√≥dulos
allprojects {
	group = 'com.arka'
	version = '0.0.1-SNAPSHOT'
	
	repositories {
		mavenCentral()
	}
}

// Configuraci√≥n para subm√≥dulos
subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'
	
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(21)
		}
	}
	
	dependencyManagement {
		imports {
			mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.1'
		}
	}
	
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-webflux'
		implementation 'org.springframework.cloud:spring-cloud-starter-config'
		implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
		
		// Spring Security dependencies para todos los m√≥dulos
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springframework.security:spring-security-oauth2-resource-server'
		implementation 'org.springframework.security:spring-security-oauth2-jose'
		implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
		implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
		implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
		implementation 'org.springframework.security:spring-security-crypto'
		implementation 'software.amazon.awssdk:regions:2.33.0'

		implementation 'software.amazon.awssdk:s3:2.25.18'
		implementation 'software.amazon.awssdk:core:2.25.18'
		implementation 'software.amazon.awssdk:regions:2.25.18'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
				
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'
		testImplementation 'io.projectreactor:reactor-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	}
	
	tasks.named('test') {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}
	
	// üìä Configuraci√≥n JaCoCo para subm√≥dulos
	jacoco {
		toolVersion = "0.8.11"
	}
	
	jacocoTestReport {
		dependsOn test
		reports {
			xml.required = true
			html.required = true
			csv.required = false
		}
		
		// Exclusiones espec√≠ficas para cada subm√≥dulo
		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
					'**/config/**',
					'**/dto/**',
					'**/*Application*',
					'**/Vulnerable*',
					'**/CodeSmells*'
				])
			}))
		}
	}
	
	jacocoTestCoverageVerification {
		violationRules {
			rule {
				limit {
					minimum = 0.60 // 60% m√≠nimo de cobertura
				}
			}
		}
	}
}

// Configuraci√≥n espec√≠fica del m√≥dulo principal
group = 'com.arka'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.1'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'software.amazon.awssdk:regions:2.33.0'
	implementation 'software.amazon.awssdk:s3:2.25.18'
	implementation 'software.amazon.awssdk:core:2.25.18'
	implementation 'software.amazon.awssdk:regions:2.25.18'
	// implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc' // Comentado temporalmente
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	
	// üçÉ MongoDB dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	
	// üìß Email dependencies
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	
	// Spring Security dependencies
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-oauth2-resource-server'
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	implementation 'org.springframework.security:spring-security-crypto'
	
	// Database dependencies
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'com.h2database:h2'
	testRuntimeOnly 'com.h2database:h2'
	
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test' // Para StepVerifier
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// üìä Configuraci√≥n JaCoCo principal
jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/config/**',
				'**/dto/**',
				'**/*Application*',
				'**/Vulnerable*',
				'**/CodeSmells*'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.60
			}
		}
	}
}

// üìä Task para reporte agregado de cobertura
task jacocoAggregatedReport(type: JacocoReport) {
	dependsOn subprojects.test
	
	description = 'Generates an aggregated code coverage report from all subprojects'
	group = 'verification'
	
	additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories.from files(subprojects.sourceSets.main.output)
	executionData.from files(subprojects.jacocoTestReport.executionData)
	
	reports {
		html.required = true
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('reports/jacoco/aggregate/html')
		xml.outputLocation = layout.buildDirectory.file('reports/jacoco/aggregate/jacocoTestReport.xml')
	}
	
	// Exclusiones para el reporte agregado
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/config/**',
				'**/dto/**',
				'**/*Application*',
				'**/Vulnerable*',
				'**/CodeSmells*',
				'**/test/**'
			])
		}))
	}
}

// üîç Configuraci√≥n SonarQube
sonarqube {
	properties {
		property "sonar.projectKey", "arkavalenzuela"
		property "sonar.projectName", "Arka Valenzuela"
		property "sonar.projectVersion", version
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/aggregate/jacocoTestReport.xml"
		property "sonar.junit.reportPaths", "build/test-results/test"
		property "sonar.exclusions", "**/Vulnerable*.java,**/CodeSmells*.java,**/config/**,**/dto/**,**/*Application*.java"
		property "sonar.coverage.exclusions", "**/Vulnerable*.java,**/CodeSmells*.java,**/config/**,**/dto/**,**/*Application*.java"
	}
}

// üöÄ PIPELINE PRINCIPAL - TASK RUNMAIN CON M√öLTIPLES STAGES
task runMain {
	group = 'application'
	description = 'Ejecuta el pipeline completo de build con m√∫ltiples stages'
	
	doLast {
		println """
		üöÄ ====================================================
		    INICIANDO PIPELINE PRINCIPAL ARKA VALENZUELA
		üöÄ ====================================================
		"""
	}
}

// üßπ STAGE 1: Limpieza
task stageClean {
	group = 'pipeline'
	description = 'Stage 1: Limpia todos los artefactos de build anteriores'
	dependsOn clean
	
	doFirst {
		println """
		üßπ ==================== STAGE 1 ====================
		    LIMPIEZA DE ARTEFACTOS
		üßπ ===================================================
		"""
	}
	
	doLast {
		println "‚úÖ Stage 1 Completado: Limpieza exitosa"
	}
}

// üîß STAGE 2: Compilaci√≥n
task stageCompile {
	group = 'pipeline'
	description = 'Stage 2: Compila el c√≥digo fuente de todos los m√≥dulos'
	dependsOn stageClean, compileJava
	mustRunAfter stageClean
	
	doFirst {
		println """
		üîß ==================== STAGE 2 ====================
		    COMPILACI√ìN DEL C√ìDIGO FUENTE
		üîß ===================================================
		"""
	}
	
	doLast {
		println "‚úÖ Stage 2 Completado: Compilaci√≥n exitosa"
	}
}

// üß™ STAGE 3: Testing
task stageTesting {
	group = 'pipeline'
	description = 'Stage 3: Ejecuta todos los tests unitarios e integraci√≥n'
	dependsOn stageCompile, test
	mustRunAfter stageCompile
	
	doFirst {
		println """
		üß™ ==================== STAGE 3 ====================
		    EJECUCI√ìN DE TESTS
		üß™ ===================================================
		"""
	}
	
	doLast {
		println "‚úÖ Stage 3 Completado: Tests ejecutados correctamente"
	}
}

// üìä STAGE 4: An√°lisis de Cobertura
task stageCoverage {
	group = 'pipeline'
	description = 'Stage 4: Genera reportes de cobertura con JaCoCo'
	dependsOn stageTesting, jacocoTestReport, jacocoAggregatedReport
	mustRunAfter stageTesting
	
	doFirst {
		println """
		üìä ==================== STAGE 4 ====================
		    AN√ÅLISIS DE COBERTURA DE C√ìDIGO
		üìä ===================================================
		"""
	}
	
	doLast {
		println "‚úÖ Stage 4 Completado: Reportes de cobertura generados"
		println "üìÑ Reporte HTML: build/reports/jacoco/aggregate/html/index.html"
	}
}

// üîç STAGE 5: An√°lisis de Calidad
task stageQuality {
	group = 'pipeline'
	description = 'Stage 5: Ejecuta an√°lisis de calidad de c√≥digo'
	dependsOn stageCoverage, jacocoTestCoverageVerification
	mustRunAfter stageCoverage
	
	doFirst {
		println """
		üîç ==================== STAGE 5 ====================
		    AN√ÅLISIS DE CALIDAD DE C√ìDIGO
		üîç ===================================================
		"""
	}
	
	doLast {
		println "‚úÖ Stage 5 Completado: Verificaci√≥n de calidad exitosa"
	}
}

// üì¶ STAGE 6: Empaquetado
task stagePackage {
	group = 'pipeline'
	description = 'Stage 6: Genera artefactos ejecutables (JAR/WAR)'
	dependsOn stageQuality, build, bootJar
	mustRunAfter stageQuality
	
	doFirst {
		println """
		üì¶ ==================== STAGE 6 ====================
		    EMPAQUETADO DE ARTEFACTOS
		üì¶ ===================================================
		"""
	}
	
	doLast {
		println "‚úÖ Stage 6 Completado: Artefactos generados correctamente"
		println "üìÑ JAR Principal: build/libs/${project.name}-${version}.jar"
	}
}

// üê≥ STAGE 7: Preparaci√≥n Docker
task stageDocker {
	group = 'pipeline'
	description = 'Stage 7: Prepara im√°genes Docker (opcional)'
	dependsOn stagePackage
	mustRunAfter stagePackage
	
	doFirst {
		println """
		üê≥ ==================== STAGE 7 ====================
		    PREPARACI√ìN DE CONTENEDORES DOCKER
		üê≥ ===================================================
		"""
	}
	
	doLast {
		println "‚úÖ Stage 7 Completado: Preparaci√≥n Docker lista"
		println "üí° Ejecuta: docker-compose build para crear im√°genes"
	}
}

// üìã STAGE 8: Reporte Final
task stageFinalReport {
	group = 'pipeline'
	description = 'Stage 8: Genera reporte final del pipeline'
	dependsOn stageDocker
	mustRunAfter stageDocker
	
	doFirst {
		println """
		üìã ==================== STAGE 8 ====================
		    REPORTE FINAL DEL PIPELINE
		üìã ===================================================
		"""
	}
	
	doLast {
		println """
		üéâ ====================================================
		    PIPELINE COMPLETADO EXITOSAMENTE
		üéâ ====================================================
		
		üìä RESUMEN DE ARTEFACTOS GENERADOS:
		   ‚Ä¢ JAR Principal: build/libs/${project.name}-${version}.jar
		   ‚Ä¢ Reportes de Tests: build/reports/tests/test/index.html
		   ‚Ä¢ Cobertura HTML: build/reports/jacoco/aggregate/html/index.html
		   ‚Ä¢ Cobertura XML: build/reports/jacoco/aggregate/jacocoTestReport.xml
		
		üöÄ PR√ìXIMOS PASOS:
		   ‚Ä¢ Revisar reportes de cobertura
		   ‚Ä¢ Ejecutar SonarQube: ./gradlew sonarqube
		   ‚Ä¢ Desplegar con Docker: docker-compose up
		
		‚úÖ BUILD EXITOSO - TODOS LOS STAGES COMPLETADOS
		"""
	}
}

// üîó Configurar dependencias del runMain
runMain.dependsOn stageFinalReport

// üéØ TASKS AUXILIARES PARA DESARROLLADORES

// üß™ Task para solo testing
task runTests {
	group = 'application'
	description = 'Ejecuta solo los stages de testing y cobertura'
	dependsOn stageCoverage
	
	doLast {
		println "üß™ Testing pipeline completado"
	}
}

// üîç Task para an√°lisis de calidad completo
task runQuality {
	group = 'application'
	description = 'Ejecuta an√°lisis completo de calidad con SonarQube'
	dependsOn stageQuality, sonarqube
	
	doLast {
		println "üîç An√°lisis de calidad completo enviado a SonarQube"
	}
}

// ‚ö° Task para build r√°pido (sin tests)
task runFast {
	group = 'application'
	description = 'Build r√°pido sin tests para desarrollo'
	dependsOn stageCompile, build
	
	doLast {
		println "‚ö° Build r√°pido completado (sin tests)"
	}
}

// üìä Task para solo reportes
task runReports {
	group = 'application'
	description = 'Genera solo reportes de cobertura y calidad'
	dependsOn test, jacocoTestReport, jacocoAggregatedReport
	
	doLast {
		println """
		üìä Reportes generados:
		   ‚Ä¢ HTML: build/reports/jacoco/aggregate/html/index.html
		   ‚Ä¢ XML: build/reports/jacoco/aggregate/jacocoTestReport.xml
		"""
	}
}
