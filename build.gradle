plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
}

// Configuración común para todos los módulos
allprojects {
	group = 'com.arka'
	version = '0.0.1-SNAPSHOT'
	
	repositories {
		mavenCentral()
	}
}

// Configuración para submódulos
subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'
	
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(21)
		}
	}
	
	dependencyManagement {
		imports {
			mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.1'
		}
	}
	
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-webflux'
		implementation 'org.springframework.cloud:spring-cloud-starter-config'
		implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
		
		// Spring Security dependencies para todos los módulos
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springframework.security:spring-security-oauth2-resource-server'
		implementation 'org.springframework.security:spring-security-oauth2-jose'
		implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
		implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
		implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
		implementation 'org.springframework.security:spring-security-crypto'
		implementation 'software.amazon.awssdk:regions:2.33.0'

		implementation 'software.amazon.awssdk:s3:2.25.18'
		implementation 'software.amazon.awssdk:core:2.25.18'
		implementation 'software.amazon.awssdk:regions:2.25.18'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
				
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'
		testImplementation 'io.projectreactor:reactor-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	}
	
	tasks.named('test') {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}
	
	// 📊 Configuración JaCoCo para submódulos
	jacoco {
		toolVersion = "0.8.11"
	}
	
	jacocoTestReport {
		dependsOn test
		reports {
			xml.required = true
			html.required = true
			csv.required = false
		}
		
		// Exclusiones específicas para cada submódulo
		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
					'**/config/**',
					'**/dto/**',
					'**/*Application*',
					'**/Vulnerable*',
					'**/CodeSmells*'
				])
			}))
		}
	}
	
	jacocoTestCoverageVerification {
		violationRules {
			rule {
				limit {
					minimum = 0.60 // 60% mínimo de cobertura
				}
			}
		}
	}
}

// Configuración específica del módulo principal
group = 'com.arka'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.1'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'software.amazon.awssdk:regions:2.33.0'
	implementation 'software.amazon.awssdk:s3:2.25.18'
	implementation 'software.amazon.awssdk:core:2.25.18'
	implementation 'software.amazon.awssdk:regions:2.25.18'
	// implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc' // Comentado temporalmente
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	
	// 🍃 MongoDB dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	
	// 📧 Email dependencies
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	
	// Spring Security dependencies
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-oauth2-resource-server'
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	implementation 'org.springframework.security:spring-security-crypto'
	
	// Database dependencies
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'com.h2database:h2'
	testRuntimeOnly 'com.h2database:h2'
	
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test' // Para StepVerifier
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// 📊 Configuración JaCoCo principal
jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/config/**',
				'**/dto/**',
				'**/*Application*',
				'**/Vulnerable*',
				'**/CodeSmells*'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.60
			}
		}
	}
}

// 📊 Task para reporte agregado de cobertura
task jacocoAggregatedReport(type: JacocoReport) {
	dependsOn subprojects.test
	
	description = 'Generates an aggregated code coverage report from all subprojects'
	group = 'verification'
	
	additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories.from files(subprojects.sourceSets.main.output)
	executionData.from files(subprojects.jacocoTestReport.executionData)
	
	reports {
		html.required = true
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('reports/jacoco/aggregate/html')
		xml.outputLocation = layout.buildDirectory.file('reports/jacoco/aggregate/jacocoTestReport.xml')
	}
	
	// Exclusiones para el reporte agregado
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/config/**',
				'**/dto/**',
				'**/*Application*',
				'**/Vulnerable*',
				'**/CodeSmells*',
				'**/test/**'
			])
		}))
	}
}

// 🔍 Configuración SonarQube
sonarqube {
	properties {
		property "sonar.projectKey", "arkavalenzuela"
		property "sonar.projectName", "Arka Valenzuela"
		property "sonar.projectVersion", version
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/aggregate/jacocoTestReport.xml"
		property "sonar.junit.reportPaths", "build/test-results/test"
		property "sonar.exclusions", "**/Vulnerable*.java,**/CodeSmells*.java,**/config/**,**/dto/**,**/*Application*.java"
		property "sonar.coverage.exclusions", "**/Vulnerable*.java,**/CodeSmells*.java,**/config/**,**/dto/**,**/*Application*.java"
	}
}

// 🚀 =====================================================================
// 🏗️ PIPELINE DE BUILD CON MÚLTIPLES STAGES
// 🚀 =====================================================================

// 🧹 STAGE 1: CLEANING
task cleanStage {
	group = 'build-pipeline'
	description = '🧹 Stage 1: Clean all build artifacts and cache'
	
	doFirst {
		println "\n🚀 ============================================="
		println "🧹 STAGE 1: CLEANING"
		println "🚀 ============================================="
		println "📂 Cleaning build directories..."
		println "🗑️  Removing cache files..."
	}
	
	dependsOn clean
	subprojects.each { project ->
		dependsOn "${project.path}:clean"
	}
	
	doLast {
		println "✅ Stage 1 completed: All artifacts cleaned"
	}
}

// 🔍 STAGE 2: CODE QUALITY ANALYSIS
task codeQualityStage {
	group = 'build-pipeline'
	description = '🔍 Stage 2: Static code analysis and quality checks'
	dependsOn cleanStage
	
	doFirst {
		println "\n🚀 ============================================="
		println "🔍 STAGE 2: CODE QUALITY ANALYSIS"
		println "🚀 ============================================="
		println "🔍 Running static code analysis..."
		println "📊 Checking code style and quality..."
	}
	
	// Agregar dependencias para análisis estático cuando estén disponibles
	// dependsOn checkstyleMain, pmd, spotbugs
	
	doLast {
		println "✅ Stage 2 completed: Code quality verified"
	}
}

// 🧪 STAGE 3: TESTING
task testingStage {
	group = 'build-pipeline'
	description = '🧪 Stage 3: Run all tests with coverage analysis'
	dependsOn codeQualityStage
	
	doFirst {
		println "\n🚀 ============================================="
		println "🧪 STAGE 3: TESTING"
		println "🚀 ============================================="
		println "🧪 Running unit tests..."
		println "🔗 Running integration tests..."
		println "📊 Generating coverage reports..."
	}
	
	// Tests del proyecto principal
	dependsOn test
	
	// Tests de todos los submódulos
	subprojects.each { project ->
		dependsOn "${project.path}:test"
	}
	
	// Reportes de cobertura
	finalizedBy jacocoTestReport, jacocoAggregatedReport
	
	doLast {
		println "✅ Stage 3 completed: All tests passed with coverage"
		println "📊 Coverage reports generated in build/reports/jacoco/"
	}
}

// 🔧 STAGE 4: COMPILATION
task compilationStage {
	group = 'build-pipeline'
	description = '🔧 Stage 4: Compile all source code'
	dependsOn testingStage
	
	doFirst {
		println "\n🚀 ============================================="
		println "🔧 STAGE 4: COMPILATION"
		println "🚀 ============================================="
		println "⚙️  Compiling main classes..."
		println "🧪 Compiling test classes..."
	}
	
	// Compilación del proyecto principal
	dependsOn compileJava, compileTestJava
	
	// Compilación de todos los submódulos
	subprojects.each { project ->
		dependsOn "${project.path}:compileJava"
		dependsOn "${project.path}:compileTestJava"
	}
	
	doLast {
		println "✅ Stage 4 completed: All code compiled successfully"
	}
}

// 📦 STAGE 5: PACKAGING
task packagingStage {
	group = 'build-pipeline'
	description = '📦 Stage 5: Create JAR files and packages'
	dependsOn compilationStage
	
	doFirst {
		println "\n🚀 ============================================="
		println "📦 STAGE 5: PACKAGING"
		println "🚀 ============================================="
		println "📦 Creating JAR files..."
		println "🐳 Preparing Docker artifacts..."
	}
	
	// Packaging del proyecto principal
	dependsOn jar, bootJar
	
	// Packaging de todos los submódulos
	subprojects.each { project ->
		dependsOn "${project.path}:bootJar"
	}
	
	doLast {
		println "✅ Stage 5 completed: All packages created"
		println "📦 JAR files available in build/libs/"
	}
}

// 🔍 STAGE 6: QUALITY VERIFICATION
task qualityVerificationStage {
	group = 'build-pipeline'
	description = '🔍 Stage 6: Verify quality gates and coverage thresholds'
	dependsOn packagingStage
	
	doFirst {
		println "\n🚀 ============================================="
		println "🔍 STAGE 6: QUALITY VERIFICATION"
		println "🚀 ============================================="
		println "📊 Verifying coverage thresholds..."
		println "🎯 Checking quality gates..."
	}
	
	dependsOn jacocoTestCoverageVerification
	
	doLast {
		println "✅ Stage 6 completed: Quality gates passed"
		println "📊 Coverage threshold (60%) met"
	}
}

// 🚀 STAGE 7: DEPLOYMENT PREPARATION
task deploymentPrepStage {
	group = 'build-pipeline'
	description = '🚀 Stage 7: Prepare artifacts for deployment'
	dependsOn qualityVerificationStage
	
	doFirst {
		println "\n🚀 ============================================="
		println "🚀 STAGE 7: DEPLOYMENT PREPARATION"
		println "🚀 ============================================="
		println "🐳 Validating Docker configurations..."
		println "☁️  Preparing cloud deployment artifacts..."
	}
	
	doLast {
		println "✅ Stage 7 completed: Ready for deployment"
		println "🐳 Docker files validated"
		println "☁️  Cloud artifacts prepared"
	}
}

// 📊 STAGE 8: SONARQUBE ANALYSIS (OPTIONAL)
task sonarAnalysisStage {
	group = 'build-pipeline'
	description = '📊 Stage 8: SonarQube analysis (optional)'
	dependsOn deploymentPrepStage
	
	doFirst {
		println "\n🚀 ============================================="
		println "📊 STAGE 8: SONARQUBE ANALYSIS"
		println "🚀 ============================================="
		println "🔍 Sending metrics to SonarQube..."
		println "📈 Analyzing technical debt..."
	}
	
	// Solo ejecutar si SonarQube está disponible
	doLast {
		if (project.hasProperty('runSonar') && project.runSonar == 'true') {
			dependsOn sonarqube
			println "✅ Stage 8 completed: SonarQube analysis finished"
		} else {
			println "⏭️  Stage 8 skipped: Use -PrunSonar=true to enable"
		}
	}
}

// 🎯 =====================================================================
// 🚀 MAIN BUILD PIPELINE TASK
// 🎯 =====================================================================

task runMain {
	group = 'build-pipeline'
	description = '🚀 MAIN PIPELINE: Execute complete build with all stages'
	
	dependsOn sonarAnalysisStage
	
	doFirst {
		println """
🚀 ============================================= 🚀
🏗️           ARKA VALENZUELA BUILD PIPELINE
🚀 ============================================= 🚀

📋 Pipeline Stages:
   1. 🧹 Cleaning
   2. 🔍 Code Quality Analysis  
   3. 🧪 Testing & Coverage
   4. 🔧 Compilation
   5. 📦 Packaging
   6. 🔍 Quality Verification
   7. 🚀 Deployment Preparation
   8. 📊 SonarQube Analysis (optional)

🎯 Starting complete build pipeline...
"""
	}
	
	doLast {
		println """
🎉 ============================================= 🎉
🏆           BUILD PIPELINE COMPLETED
🎉 ============================================= 🎉

✅ All stages completed successfully!

📊 Build Summary:
   🧹 Cleaned: All artifacts removed
   🔍 Quality: Code analysis passed
   🧪 Tests: All tests passed with coverage
   🔧 Compiled: All modules compiled
   📦 Packaged: JAR files created
   🔍 Verified: Quality gates met
   🚀 Ready: Deployment artifacts prepared

📂 Generated Artifacts:
   📦 JAR files: build/libs/
   📊 Test reports: build/reports/tests/
   📈 Coverage: build/reports/jacoco/
   📋 Build logs: Available in console

🚀 Next Steps:
   🐳 Docker: ./gradlew dockerBuild
   ☁️  Deploy: ./gradlew deploy
   📊 SonarQube: ./gradlew runMain -PrunSonar=true

🎯 Build completed successfully!
"""
	}
}

// 🎯 =====================================================================
// 🛠️ UTILITY TASKS
// 🎯 =====================================================================

// 🚀 Quick build without SonarQube
task quickBuild {
	group = 'build-pipeline'
	description = '⚡ Quick build: Essential stages only'
	dependsOn deploymentPrepStage
	
	doLast {
		println "⚡ Quick build completed! Skipped SonarQube analysis."
	}
}

// 🧪 Test-only pipeline
task testOnly {
	group = 'build-pipeline'
	description = '🧪 Run tests and coverage only'
	dependsOn testingStage
	
	doLast {
		println "🧪 Test pipeline completed!"
	}
}

// 📦 Build without tests (for rapid iteration)
task buildNoTest {
	group = 'build-pipeline'
	description = '📦 Build without running tests'
	dependsOn packagingStage
	
	doFirst {
		println "⚠️  Building without tests - use only for rapid development!"
	}
	
	tasks.test.enabled = false
	subprojects.each { project ->
		project.tasks.test.enabled = false
	}
}

// 🔍 Quality check only
task qualityCheck {
	group = 'build-pipeline'
	description = '🔍 Run quality analysis without build'
	dependsOn qualityVerificationStage
	
	doLast {
		println "🔍 Quality check completed!"
	}
}

// 📊 Coverage report only
task coverageReport {
	group = 'build-pipeline'
	description = '📊 Generate coverage reports only'
	dependsOn jacocoAggregatedReport
	
	doLast {
		println "📊 Coverage reports generated in build/reports/jacoco/"
	}
}
